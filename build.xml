<?xml version="1.0" encoding="UTF-8" ?>
<project name="AN.ON" default="dist" basedir=".">
	<description>Ant Build file for the various compontens of the AN.ON project</description>

	<taskdef name="jarbundler" 
	         classname="net.sourceforge.jarbundler.JarBundler"/>
	
	<!-- set global properties for this build -->
	<property name="AppName" value="JAP"/>
	<property name="MainClass" value="JAP"/>
	<property name="MainClass.osx" value="JAPMacintosh"/>
	<property name="Mac_bundle_id" value="de.jondos.JonDo"/>
	<property name="JAP_args" value=""/>
	<property name="src" location="src"/>
	<property name="certificates" location="certificates"/>
  
	<property name="excludesSrcJap" value="jpi/** infoservice/** misc/** anon/crypto/tinytls/test/** platform/signal/**/*"/>
	<property name="infoservice-excludes" value="jpi/** infoservice/performance/** misc/**"/>
	<property name="build" location="build"/>
	<property name="build.libs" location="lib"/>
	<property name="dist" location="dist"/>
	<property name="dist.osx" location="${dist}/MacOsX"/>
	
	<property name="classpath_httplib_file_name" location="${build.libs}/HTTPClient.jar"/>
	<property name="classpath_xmllib_file_name" location="${build.libs}/xml.jar"/>
	<property name="classpath_ftplib_file_name" location="${build.libs}/ApacheFTPClient.jar"/>
	<property name="classpath_log4j_file_name" location="${build.libs}/log4j.jar"/>
	<property name="classpath_mail_file_name" location="${build.libs}/mail.jar"/>
	<property name="classpath_jama_file_name" location="${build.libs}/jama.jar"/>
	<property name="classpath_bouncy_file_name" location="${build.libs}/BouncyCastleLightForJAP.jar"/>
	<property name="classpath_xmlrpc_file_name" location="${build.libs}/apache-xml-rpc-1.1.jar"/>
	<property name="classpath_jaf_file_name" location="${build.libs}/activation.jar"/>
	<property name="classpath_skype_file_name" location="${build.libs}/skype.jar"/>
	
	<path id="classpath_httplib" location="${classpath_httplib_file_name}"/>
	<path id="classpath_ftplib" location="${classpath_ftplib_file_name}"/>
	<path id="classpath_xml-rpc" location="${classpath_xmlrpc_file_name}"/>
	<path id="classpath_java_mail" location="${build.libs}/mail.jar"/>
	<path id="classpath_mrj" location="${build.libs}/MRJClasses.zip"/>
	<path id="classpath_aje" location="${build.libs}/AppleJavaExtensions.jar"/>
	<path id="classpath_jama" location="${build.libs}/jama.jar"/>
	<path id="classpath_swing" location="${build.libs}/swingall.jar"/>
	<path id="classpath_log4j" location="${classpath_log4j_file_name}"/>
	<path id="classpath_bouncycastle_jap" location="${classpath_bouncy_file_name}"/>
	<path id="classpath_jaf" location="${classpath_jaf_file_name}"/>
	<path id="classpath_skype" location="${classpath_skype_file_name}"/>
	
	<path id="classpath_all">
		<path refid="classpath_swing"/>
		<path refid="classpath_httplib"/>
		<path refid="classpath_ftplib"/>
		<path refid="classpath_xml-rpc"/>
		<path refid="classpath_java_mail"/>
		<path refid="classpath_jama"/>
		<path refid="classpath_log4j"/>
		<path refid="classpath_mrj"/>
		<path refid="classpath_aje"/>
		<path refid="classpath_bouncycastle_jap"/>
		<path refid="classpath_jaf"/>
		<path refid="classpath_skype"/>
	</path>
 
	<target name="init-dirs">
		<!-- Create the time stamp -->
		<tstamp/>
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}"/>
		<mkdir dir="${build.libs}"/>
	</target>
 
	<target name="init-libs" depends="init-dirs">
		<get src="http://anon.inf.tu-dresden.de/develop/java_1_1_classes.zip" 
			verbose="true" 
			usetimestamp="true"
			ignoreerrors="true"
			dest="${build.libs}/java_1_1_classes.zip"/>    
    
		<get src="http://anon.inf.tu-dresden.de/develop/swingall.jar" 
			verbose="true" 
			usetimestamp="true"
			ignoreerrors="true"
			dest="${build.libs}/swingall.jar"/>    
  
		<get src="http://anon.inf.tu-dresden.de/develop/http.jar" 
			verbose="true"
			usetimestamp="true"
			ignoreerrors="true"
			dest="${classpath_httplib_file_name}"/>
  	
		<get src="http://anon.inf.tu-dresden.de/develop/xml.jar" 
			verbose="true" 
			usetimestamp="true"
			ignoreerrors="true"
			dest="${classpath_xmllib_file_name}"/>
  	
   <get src="http://anon.inf.tu-dresden.de/develop/BouncyCastleLightForJAP.jar" 
    	 verbose="true" 
   		 usetimestamp="true"
    	 ignoreerrors="true"
    	 dest="${classpath_bouncy_file_name}"/>
    
    <get src="http://anon.inf.tu-dresden.de/develop/ApacheFTPClient.jar" 
    	 verbose="true" 
  		 usetimestamp="true"
  	     ignoreerrors="true" 
    	 dest="${classpath_ftplib_file_name}"/> 
    
  	<get src="http://anon.inf.tu-dresden.de/develop/apache-xmlrpc-1.1.jar" 
  		 verbose="true" 
  		 usetimestamp="true"
  	     ignoreerrors="true"
  		 dest="${classpath_xmlrpc_file_name}"/>
    
  	<get src="http://anon.inf.tu-dresden.de/develop/mail.jar" 
  		 verbose="true" 
  		 usetimestamp="true"
  	     ignoreerrors="true"
  		 dest="${build.libs}/mail.jar"/>    
  
    <get src="http://anon.inf.tu-dresden.de/develop/Jama.jar" 
  		 verbose="true" 
  		 usetimestamp="true"
  	     ignoreerrors="true"
  		 dest="${build.libs}/jama.jar"/>
  	
    <get src="http://anon.inf.tu-dresden.de/develop/log4j.jar" 
  		 verbose="true" 
  		 usetimestamp="true"
  	     ignoreerrors="true"
  		 dest="${classpath_log4j_file_name}"/>
  	
    <get src="http://anon.inf.tu-dresden.de/develop/MRJClasses.zip" 
  		 verbose="true"
  		 usetimestamp="true"
  	     ignoreerrors="true"
  		 dest="${build.libs}/MRJClasses.zip"/>
  	
    <get src="http://anon.inf.tu-dresden.de/develop/AppleJavaExtensions.jar" 
  		 verbose="true" 
  		 usetimestamp="true"
  	     ignoreerrors="true"
  		 dest="${build.libs}/AppleJavaExtensions.jar"/>    
  
    <get src="http://anon.inf.tu-dresden.de/develop/japdll.dll" 
  		 verbose="true" 
  		 usetimestamp="true"
  	     ignoreerrors="true"
  		 dest="${build.libs}/japdll.dll"/>
  	
    <get src="http://anon.inf.tu-dresden.de/develop/libMacOSX.jnilib" 
  		 verbose="true" 
  		 usetimestamp="true"
  	     ignoreerrors="true"
  		 dest="${build.libs}/libMacOSX.jnilib"/>
  	
    <get src="http://anon.inf.tu-dresden.de/develop/activation.jar" 
  		 verbose="true"
  		 usetimestamp="true"
  	     ignoreerrors="true"
  		 dest="${build.libs}/activation.jar"/>
  	
    <get src="http://anon.inf.tu-dresden.de/develop/japdllversion.txt" 
  		 verbose="true" 
  		 usetimestamp="true"
  	     ignoreerrors="true"
  		 dest="${build.libs}/japdllversion.txt"/> 
  	
    <get src="http://anon.inf.tu-dresden.de/develop/macosxlibversion.txt" 
  		 verbose="true" 
  		 usetimestamp="true"
  	     ignoreerrors="true"
  		 dest="${build.libs}/macosxlibversion.txt"/> 
  	
  	<get src="http://anon.inf.tu-dresden.de/develop/skype.jar" 
  	  		 verbose="true" 
  	  		 usetimestamp="true"
  	  	     ignoreerrors="true"
  	  		 dest="${classpath_skype_file_name}"/> 
  	 
  	<available file="${classpath_httplib_file_name}" property="httplib.available"/>
  	<available file="${classpath_xmllib_file_name}" property="xmllib.available"/>
  	<available file="${classpath_ftplib_file_name}" property="ftplib.available"/>
  	<available file="${classpath_log4j_file_name}" property="log4j.available"/>
  	<available file="${classpath_mail_file_name}" property="mail.available"/>
  	<available file="${classpath_jama_file_name}" property="jama.available"/>
  	<available file="${classpath_bouncy_file_name}" property="bouncy.available"/>
  	<available file="${classpath_xmlrpc_file_name}" property="xmlrpc.available"/>
  	<available file="${classpath_jaf_file_name}" property="jaf.available"/>
  	<available file="${classpath_skype_file_name}" property="skype.available"/>
  	
  	<fail unless="httplib.available" message="HTTP lib not available"/>
	<fail unless="xmllib.available" message="XML lib not available"/>
  	<fail unless="ftplib.available" message="FTP lib not available"/>
  	<fail unless="log4j.available" message="Log4J not available"/>
  	<fail unless="mail.available" message="Java Mail not available"/>
  	<fail unless="jama.available" message="Java Matrix not available"/>
  	<fail unless="bouncy.available" message="Bouncy Castle not available"/>
  	<fail unless="xmlrpc.available" message="XML RPC not available"/>
  	<fail unless="jaf.available" message="Java Activation not available"/>
  	<fail unless="skype.available" message="Skype4Java not available"/>
  </target>
  
  <target name="init" depends="init-libs"/>

  <target name="compile" depends="init" description="compile the source">
    <!-- Compile the java code from ${src} into ${build} -->
    <javac debug="true" debuglevel="lines,source" sourcepath=""  srcdir="${src}" excludes="${excludesSrcJap}" 
    	destdir="${build}"  classpathref="classpath_all" fork="yes">
    <include name="**/*.java"/>
    </javac>
  </target>
  
  <target name="dist" depends="jar" description="generate the distribution">  </target>

  <target name="jar" depends="getcurrentjapdllversion,getcurrentmacosxlibversion, compile">
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}"/>
    <jar jarfile="${dist}/JAP.jar" manifest="MANIFEST.MF" index="true" duplicate="preserve">
      <fileset dir="${build}" includes="**/*.class">
        <exclude name="jpi/**/*"/>
        <exclude name="infoservice/**/*"/>
        <exclude name="misc/**/*"/>
        <exclude name="captcha/**/*"/>
		<exclude name="platform/signal/**/*"/>
      </fileset>
      <zipfileset dir="src" includes="JAPM*.properties"/>
      <zipfileset dir="." includes="help/**/*"/>
      <zipfileset dir="." includes="images/**/*"/>
      <zipfileset dir="." includes="certificates/**/*"/>
      <zipfileset src="${classpath_httplib_file_name}"/>
      <zipfileset src="${classpath_xmllib_file_name}"/>
      <zipfileset src="${classpath_ftplib_file_name}"/>
      <zipfileset src="${classpath_log4j_file_name}"/>
      <zipfileset src="${classpath_bouncy_file_name}"/>
      <zipfileset src="${classpath_xmlrpc_file_name}"/>
      <zipfileset src="${classpath_skype_file_name}"/>
      <zipfileset file="${build.libs}/japdll.dll" fullpath="japdll.dll.${currentJAPDllVersion}"/>
      <zipfileset file="${build.libs}/libMacOSX.jnilib" fullpath="libMacOSX.jnilib.${currentMacOSXLibVersion}"/>
    </jar>
  </target>

	<target name="getcurrentversion" description="Sets the property 'currentVersion', 'releaseDate' to the value provided in JAPConstants.java">
	    <loadfile srcfile="${src}/jap/JAPConstants.java" property="currentVersion">
	      <filterchain>
	        <linecontains>
	          <contains value="static final String aktVersion"/>
	        </linecontains>
	        <containsregex pattern="(.*)([0-9][0-9][\.][0-9][0-9][\.][0-9][0-9][0-9])(.*)" replace="\2"/>
	        <deletecharacters chars="\r\n" />
	      </filterchain>
	    </loadfile>
	    <echo message="Current Version is: ${currentVersion}"/>
	    <loadfile srcfile="${src}/jap/JAPConstants.java" property="releaseDate">
	      <filterchain>
	        <linecontains>
	          <contains value="private static final String RELEASE_DATE"/>
	        </linecontains>
	        <containsregex pattern="(.*&quot;)(.*)(&quot;.*)" replace="\2"/>
	        <deletecharacters chars="\r\n" />
	      </filterchain>
	    </loadfile>
    	<echo message="Release Date is: ${releaseDate}"/>
 	</target>
  
	<target name="getcurrentjapdllversion" description="Sets the property 'currentJAPDllVersion' to the value provided on the Web">
	    <loadfile srcfile="${build.libs}/japdllversion.txt" property="currentJAPDllVersion">
	      <filterchain>
	        <deletecharacters chars="\r\n" />
	      </filterchain>
	    </loadfile>
    	<echo message="Current JAPDLL Version is: ${currentJAPDllVersion}"/>
	</target>
	
	<target name="getcurrentmacosxlibversion" description="Sets the protpery 'currentMacOSXLibVersion' to the value provided on the Web">
		<loadfile property="currentMacOSXLibVersion" srcfile="${build.libs}/macosxlibversion.txt">
			<filterchain>
				<deletecharacters chars="\r\n" />
			</filterchain>
		</loadfile>
		<echo message="Current MacOSXLib Version is: ${currentMacOSXLibVersion}"/>
	</target>

  
  <target name="mac-dist" depends="jar, getcurrentversion" description="creates a JonDo Mac OS X bundle">
  	<mkdir dir="${dist.osx}"/>
  	<!-- 
  	<mkdir dir="${dist.osx}/help/JonDo Help"/>
  	<copy todir="${dist.osx}/help/JonDo Help">
  		<fileset dir="help/de/help"/>
  	</copy> 
  	-->
  		<jarbundler dir="${dist.osx}"
  	            name="${AppName}"
  	            mainclass="${MainClass.osx}" 
  	            bundleid="${Mac_bundle_id}"
  				jar="${dist}/${AppName}.jar"
  				icon="images/${AppName}.icns"
  				signature="JAPp"
  				version="${currentVersion}"
  				shortname="${AppName}"
  				arguments="${JAP_args}">
  				
  				<javaproperty name="apple.awt.brushMetalLook" value="false"/>
  				<javaproperty name="apple.awt.showGrowBox" value="false"/>
				<javaproperty name="com.apple.hwaccel" value="true"/>
				<javaproperty name="com.apple.mrj.application.growbox.intrudes" value="false"/>

  		</jarbundler>
  </target>
	
	<target name="mac-diskimage" depends="mac-dist" 
			description="creates a compressed dmg image of the JonDo Mac OS X bundle (needs Mac OS X)">
	  <exec executable="hdiutil">
	    <arg value="create"/>
	    <arg value="-srcfolder"/>
	    <arg value="${dist.osx}/${AppName}.app"/>
	  	<arg value="${dist.osx}/${AppName}.dmg"/>
	  </exec>
	</target>
	
  <target name="clean" description="clean up">
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
    <!-- Delte unwante certifcates from source... -->
    <delete>
    <fileset dir="${certificates}" includes="**/*.cer.dev"/>
    </delete>    
    <!-- Delete unwanted source files (aka tests etc.) -->
    <delete dir="${src}/anon/tor/test"/>
    <delete dir="${src}/anon/crypto/tinytls/test"/>
    <delete dir="${src}/misc"/>    
  </target>
	
<!-- InfoService targets -->
	
  <target name="infoservice-init" depends="infoservice-clean" 
			description="initializes folder structure for infoservice distribution">
		<mkdir dir="${build}" />
		<mkdir dir="${build}/infoservice" />
		<mkdir dir="${dist}" />
		<mkdir dir="${dist}/infoservice" />
	</target>
	
	<target name="infoservice-compile" depends="infoservice-init, init-libs"
			description="compiles infoservices sources">
		
		<javac debug="true" debuglevel="lines,source"
				srcdir="${src}" 
				destdir="${build}" 
				excludes="${infoservice-excludes}" 
				classpathref="classpath_all">
			
			<include name="**/*.java"/>
		</javac>
	</target>
	
	<target name="infoservice-dist" depends="infoservice-compile"
				description="creates infoservice binary distribution">
			
			<jar jarfile="${dist}/InfoService.jar" manifest="manifest_info.mf">
				<fileset dir="${build}" includes="**/*.class">
				        
				</fileset>
				<zipfileset src="${classpath_httplib_file_name}"/>
				<zipfileset src="${classpath_xmllib_file_name}"/>
				<zipfileset src="${classpath_ftplib_file_name}"/>
				<zipfileset src="${classpath_log4j_file_name}"/>
				<zipfileset src="${classpath_jama_file_name}"/>
				<zipfileset src="${classpath_bouncy_file_name}"/>
				<zipfileset src="${classpath_xmlrpc_file_name}"/>
				<zipfileset src="${classpath_skype_file_name}"/>
			</jar>
	</target>
	
	 <target name="infoservice-clean" description="clean up inforvice compiled units">
	 	<delete dir="${build}/infoservice" />
	 	<delete file="${dist}/InfoService.jar"/>
	 </target>
</project>
