<?xml version="1.0" encoding="UTF-8" ?>
<project name="JonDonym" default="dist" basedir=".">
	<description>Ant Build file for the various components of the JonDonym project</description>

	<!-- set global properties for this build -->
	<property file="build_properties/global.properties"/>
	<property file="build_properties/jondo-global.properties"/>	
	<property file="build_properties/global-libs.properties"/>	
	
	<property name="mainclass" value="JAP"/>
	<property name="JAP_args" value=""/>
	<property name="jarfile" location="${dist}/${jarfile.name}.jar"/>
	
	<property name="dist.linux" location="${dist}/linux"/>
	
	<property name="excludesSrcJap" value="${jondoExcludes} JAPMacintosh.java"/>
	
	<path id="classpath.httplib" location="${lib.http}"/>
	<path id="classpath.ftplib" location="${lib.ftp}"/>
	<path id="classpath.xml-rpc" location="${lib.xmlrpc}"/>
	<path id="classpath.log4j" location="${lib.log4j}"/>
	<path id="classpath.bouncycastle_jap" location="${lib.bouncyCastle}"/>
	<path id="classpath.skype" location="${lib.skype4J}"/>
	<path id="classpath.mrj" location="${lib.mrj_classes}"/>
	<path id="classpath.aje" location="${lib.appleJavaExtensions}"/>
	<!--<path id="classpath.java_mail" location="${lib.mail}"/>
	<path id="classpath.jaf" location="${lib.jaf}"/>
	<path id="classpath.jama" location="${lib.jama}"/>
	<path id="classpath.swing" location="${lib.swing}"/> -->
	
	<path id="classpath.all">
		<path refid="classpath.httplib"/>
		<path refid="classpath.ftplib"/>
		<path refid="classpath.xml-rpc"/>
		<path refid="classpath.log4j"/>
		<path refid="classpath.bouncycastle_jap"/>
		<path refid="classpath.skype"/>
		<path refid="classpath.mrj"/>
		<path refid="classpath.aje"/>
		<!--<path refid="classpath.jama"/>-->
	</path>
	
	<target name="init-dirs">
		<!-- Create the time stamp -->
		<tstamp/>
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}"/>
		<mkdir dir="${lib}"/>
	</target>
	
	<target name="init-global-libs" depends="init-dirs">
		
		<!-- 
		<get src="${lib.java1_1_classes.url}" dest="${lib.java1_1_classes}"
			verbose="true" usetimestamp="true" ignoreerrors="true"/>    
		<get src="${lib.swing.url}" dest="${lib.swing}"
			verbose="true" usetimestamp="true" ignoreerrors="true"/> 
		<get src="${lib.jama.url}" dest="${lib.jama}"
			verbose="true" usetimestamp="true" ignoreerrors="true"/> -->    
	
		<get src="${lib.japdll.url}" dest="${lib.japdll}"
			verbose="true" usetimestamp="true" ignoreerrors="true"/>
		<get src="${lib.http.url}" dest="${lib.http}"
			verbose="true" usetimestamp="true" ignoreerrors="true"/>
		<get src="${lib.xml.url}" dest="${lib.xml}"
			verbose="true" usetimestamp="true" ignoreerrors="true"/>
		<get src="${lib.bouncyCastle.url}" dest="${lib.bouncyCastle}"
			verbose="true" usetimestamp="true" ignoreerrors="true"/>
		<get src="${lib.ftp.url}" dest="${lib.ftp}"
			verbose="true" usetimestamp="true" ignoreerrors="true"/> 
		<get src="${lib.xmlrpc.url}" dest="${lib.xmlrpc}"
			verbose="true" usetimestamp="true" ignoreerrors="true"/>
		<get src="${lib.log4j.url}" dest="${lib.log4j}"
			verbose="true" usetimestamp="true" ignoreerrors="true"/>	
		<get src="${lib.skype4J.url}" dest="${lib.skype4J}"
  	  		 verbose="true" usetimestamp="true" ignoreerrors="true"/> 
  	 
		<!-- Mac OS X specific libs -->
		<get src="${lib.mrj_classes.url}" dest="${lib.mrj_classes}"
			verbose="true" usetimestamp="true" ignoreerrors="true"/> 		
		<get src="${lib.appleJavaExtensions.url}" dest="${lib.appleJavaExtensions}"
			verbose="true" usetimestamp="true" ignoreerrors="true"/>
		<get src="${lib.macOSX.url}" dest="${lib.macOSX}"
			verbose="true" usetimestamp="true" ignoreerrors="true"/>
		
		<!--<available file="${lib.jama}" property="lib.jama.available"/>-->
		<available file="${lib.http}" property="lib.http.available"/>
		<available file="${lib.xml}" property="lib.xml.available"/>
		<available file="${lib.ftp}" property="lib.ftp.available"/>
		<available file="${lib.log4j}" property="lib.log4j.available"/>
		<available file="${lib.bouncyCastle}" property="lib.bouncyCastle.available"/>
		<available file="${lib.xmlrpc}" property="lib.xmlrpc.available"/>
		<available file="${lib.skype4J}" property="lib.skype4J.available"/>
		<available file="${lib.appleJavaExtensions}" property="lib.appleJavaExtensions.available"/>
		<available file="${lib.mrj_classes}" property="lib.mrj_classes.available"/>
		
		
		<!--<fail unless="lib.jama.available" message="Java Matrix not available"/>-->
		<fail unless="lib.http.available" message="HTTP lib not available"/>
		<fail unless="lib.xml.available" message="XML lib not available"/>
		<fail unless="lib.ftp.available" message="FTP lib not available"/>
		<fail unless="lib.log4j.available" message="Log4J not available"/>
		<fail unless="lib.bouncyCastle.available" message="Bouncy Castle not available"/>
		<fail unless="lib.xmlrpc.available" message="XML RPC not available"/>
		<fail unless="lib.skype4J.available" message="Skype4Java not available"/>
		<fail unless="lib.appleJavaExtensions.available" message="Apple extensions not available"/>
		<fail unless="lib.mrj_classes.available" message="MRJ classes not available"/>
	</target>
  
	<target name="init" depends="init-global-libs">
	    <copy todir="${build}" verbose="true">
	      <fileset dir="${src}" includes="**/res/*"/>
	    </copy>
	</target>
	
	<!-- if not already define, set the version number for the compile option to the default VM version -->
	<target name="init-compile-version" unless="build.compile.version">
		<property name="build.compile.version" value="${java.specification.version}"/>
	</target>
	
	<target name="compile" depends="init-compile-version, init" description="compile the source">
		<!-- Compile the java code from ${src} into ${build} -->
		<javac debug="true" debuglevel="lines,source" sourcepath="" 
			classpathref="classpath.all" srcdir="${src}" excludes="${excludesSrcJap}" 
    		destdir="${build}" fork="yes"
			source="${build.compile.version}"
			target="${build.compile.version}">
			
			<include name="**/*.java"/>
		</javac>
	</target>
  
	<target name="getcurrentjapdllversion" 
		description="Sets the property 'currentJAPDllVersion' to the value provided on the Web">
			  
		<get src="http://anon.inf.tu-dresden.de/develop/japdllversion.txt" 
			verbose="true" 
			usetimestamp="true"
			ignoreerrors="true"
			dest="japdllversion.txt"/> 
			
		<loadfile srcfile="japdllversion.txt" property="currentJAPDllVersion">
		<filterchain>
			<deletecharacters chars="\r\n" />
		</filterchain>
		</loadfile>
		<echo message="Current JAPDLL Version is: ${currentJAPDllVersion}"/>
	</target>
		
	<target name="getcurrentmacosxlibversion" 
				description="Sets the property 'currentMacOSXLibVersion' to the value provided on the Web">	
				
		<get src="http://anon.inf.tu-dresden.de/develop/macosxlibversion.txt" 
			verbose="true" 
			usetimestamp="true"
			ignoreerrors="true"
			dest="macosxlibversion.txt"/> 
				
		<loadfile property="currentMacOSXLibVersion" srcfile="macosxlibversion.txt">
			<filterchain>
				<deletecharacters chars="\r\n" />
			</filterchain>
		</loadfile>
	</target>
	
	<target name="jar-core"
		depends="compile"	
		description="generates the core jarfile for without any libraries">
		
		<jar jarfile="${jarfile}" manifest="MANIFEST.MF" duplicate="preserve">
			<fileset dir="${build}" includes="**/*.class,**/res/*">
				<exclude name="jpi/**/*"/>
				<exclude name="infoservice/**/*"/>
				<exclude name="misc/**/*"/>
				<exclude name="captcha/**/*"/>
				<exclude name="platform/signal/**/*"/>
			</fileset>
			<zipfileset dir="src" includes="JAPM*.properties"/>
			<zipfileset dir="." includes="help/**/*"/>
			<zipfileset dir="." includes="images/**/*"/>
			<zipfileset dir="." includes="certificates/**/*"/>
		</jar>
	</target>
	
	<target name="jar-full"
		description="creates a jar with all os-independent libraries">
		<!-- Create the distribution directory -->
		<mkdir dir="${dist}"/>
  	
		<!-- manifest file -->
		<manifest file="MANIFEST.MF">
			<attribute name="Main-Class" value="${mainclass}"/>
		</manifest>
  	
		<!-- Create the core jarfile -->
		<antcall target="jar-core"/>
  	
		<!-- append the necessary libraries -->
		<jar jarfile="${jarfile}" update="true"> 
			<zipfileset src="${lib.http}"/>
			<zipfileset src="${lib.xml}"/>
			<zipfileset src="${lib.ftp}"/>
			<zipfileset src="${lib.log4j}"/>
			<zipfileset src="${lib.bouncyCastle}"/>
			<zipfileset src="${lib.xmlrpc}"/>
			<zipfileset src="${lib.skype4J}"/>
		</jar>
	</target>

	<target name="jar-windows" depends="getcurrentjapdllversion"
				description="creates a jar for Windows distributions containing the japdll.dll">
		
		<antcall target="${buildfile.core.target.jar.osindependent}"/>
		<jar jarfile="${jarfile}" update="true"> 
			<zipfileset file="${lib.japdll}" fullpath="japdll.dll.${currentJAPDllVersion}"/>
		</jar>
	</target>
	
	<target name="jar-mac"
		description="creates a jar for Mac OS X distributions containing the libMacOSX.jnilib"
		depends="getcurrentmacosxlibversion">
			<antcall target="${buildfile.core.target.jar.osindependent}">
				<param name="mainclass" value="${mainclass.osx}"/>
			</antcall>
			
			<jar jarfile="${jarfile}" update="true"> 
				<zipfileset file="${lib.macOSX}" fullpath="libMacOSX.jnilib.${currentMacOSXLibVersion}"/>
			</jar>
	</target>
	
	<target name="jar-all-platforms" depends="getcurrentjapdllversion, getcurrentmacosxlibversion"
	 description="creates a jar containing all platform-specific libraries">
			
			<antcall target="${buildfile.core.target.jar.osindependent}"/>
			<jar jarfile="${jarfile}" update="true"> 
				<zipfileset file="${lib.japdll}" fullpath="japdll.dll.${currentJAPDllVersion}"/>
				<zipfileset file="${lib.macOSX}" fullpath="libMacOSX.jnilib.${currentMacOSXLibVersion}"/>
				<zipfileset file="${lib.appleJavaExtensions}"/>
				<zipfileset file="${lib.mrj_classes}"/>
			</jar>
	</target>
	
	<target name="jar-with-external-libs" depends="compile"
		description="alternative jar target, which does not copy the required libs to the jar-file">
	    <!-- 
	    Note: when calling this target: make sure the lib-property is set properly to the 
	    desired classpath root for all external libs. (The lib property can be redefined by 
	    using the antcall-task) 
		-->
		<mkdir dir="${dist}"/>		
		<manifest file="MANIFEST.MF">
			<attribute name="Class-Path" 
				value="${lib.http} ${lib.xml} ${lib.ftp} ${lib.log4j} ${lib.bouncyCastle} ${lib.xmlrpc} ${lib.skype4J}"/>
			<attribute name="Main-Class" value="${mainclass}"/>
		</manifest>
		
		<!-- Create the core jarfile -->
		<antcall target="jar-core"/>
	</target>
	
	<!-- this standard target appends a signature to the created jar-file. If you want to create one without signature,
	  use target "jar-all-platforms" -->
	<target name="dist" depends="jar-all-platforms" 
		description="generates a jarfile-distribution for all platforms and also creates a gpg-signature">
	
			<ant antfile="${buildfile.signature}" target="${buildfile.signature.target.sign}">
				<property name="artefact" value="${jarfile}"/>
			</ant>
	</target>
	
	<!-- still not usable, but please don't delete it yet
	<target name="debian-dist">
		<antcall target="jar-with-external-libs" inheritAll="false">
			<param name="lib" value="${extlibs}"/>
		</antcall>
	</target>
	-->
	
	<target name="linux-dist" depends="jar-all-platforms">
		<mkdir dir="${dist.linux}/${appname}"/>
		<copy file="${jarfile}" todir="${dist.linux}/${appname}"/>
		
		<filter token="ARGS" value="${JAP_args}"/>
		<filter token="APPNAME" value="${appname}"/>
		<filter token="JARNAME" value="${jarfile.name}"/>
		<copy file="install_jondo" todir="${dist.linux}/${appname}" filtering="true"/>
		<!-- Copying with Ant doesn't preserve file permissions -->
		<chmod file="${dist.linux}/${appname}/install_jondo" perm="755"/>
		
	</target>
	
	<!-- this archiving target also creates a pgp signature -->
	<target name="linux-dist-archive" depends="linux-dist">
		
		<!--<zip destfile="${dist.linux}/${appname}.zip" basedir="${dist.linux}"/>-->
		<!-- 
		better than the corresponding ant target,
		because it preserves file permissions 
		-->
		<exec executable="zip" dir="${dist.linux}">
			<arg value="-r"/>
			<arg value="${appname}.zip"/>
			<arg value="${appname}"/>
		</exec>
		
		<!-- sign the archive -->
		<ant antfile="${buildfile.signature}" target="${buildfile.signature.target.sign}">
			<property name="artefact" value="${dist.linux}/${appname}.zip"/>
		</ant>
	</target>
	
	<target name="manioq-for-linux-dist-archive">
		<antcall target="linux-dist-archive">
			<param name="JAP_args" value="--manioq"/>
			<param name="dist.linux" value="${dist.linux}/manioq"/>
		</antcall>
	</target>
	
	<!-- JAP cleanup targets -->
	<target name="clean" 
  		depends="cleanup-tests, cleanup-certificates, cleanup-dist, cleanup-libs" 
  		description="the whole cleanup procedure"/>
	
	<target name="cleanup-libs"
			description="cleans up the downloaded libs">
		<delete dir="${lib}"/>
	</target>
	
	<target name="cleanup-tests" description="deletes unwanted source files (aka tests etc.)">
		<delete dir="${src}/anon/tor/test"/>
		<delete dir="${src}/anon/crypto/tinytls/test"/>
		<delete dir="${src}/misc"/>    
	</target>
	
	<target name="cleanup-certificates" description="deletes unwanted certifcates from source">
		<delete>
			<fileset dir="${certificates}" includes="**/*.cer.dev"/>
		</delete>   
	</target>
	
	<target name="cleanup-dist" depends="cleanup-build" description="deletes the ${build} and ${dist} directory trees">
		<delete dir="${dist}"/>
	</target>
	
	<target name="cleanup-build" description="deletes the ${build} directory tree ">
			<delete dir="${build}"/>
	</target>
	
</project>
